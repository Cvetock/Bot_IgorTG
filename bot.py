import os
from dotenv import load_dotenv
from datetime import date
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    CommandHandler, MessageHandler, CallbackQueryHandler, filters
)
from models import Base, User, Master, Appointment
from calendar_utils import build_calendar
from telegram.ext import CallbackQueryHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
load_dotenv()
BOT_TOKEN     = os.getenv("BOT_TOKEN")
DATABASE_URL  = os.getenv("DATABASE_URL")
WEBHOOK_HOST  = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH  = os.getenv("WEBHOOK_PATH")
WEBHOOK_PORT  = int(os.getenv("WEBHOOK_PORT", "8000"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy
engine       = create_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)
Base.metadata.create_all(engine)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
MAIN_MENU = ReplyKeyboardMarkup([
    ["üìù –ó–∞–ø–∏—Å—å", "üìã –ú–æ—è –∑–∞–ø–∏—Å—å"],
    ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", "‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
], resize_keyboard=True)

# –ê–¥–º–∏–Ω-–º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞
ADMIN_MENU = ReplyKeyboardMarkup([
    ["üìÑ –í—Å–µ –∑–∞–ø–∏—Å–∏", "‚Ü© –ù–∞–∑–∞–¥"]
], resize_keyboard=True)

# -------- handlers --------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    session = SessionLocal()
    tg_id = update.effective_user.id
    user = session.get(User, tg_id)
    if not user:
        user = User(tg_id=tg_id, role="client")
        session.add(user)
        session.commit()
    # –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä
    master = session.query(Master).filter_by(tg_id=tg_id).first()
    session.close()

    if master:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, –º–∞—Å—Ç–µ—Ä {master.name}!", reply_markup=ADMIN_MENU
        )
    else:
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏.", reply_markup=MAIN_MENU
        )

# --- –ó–∞–ø–∏—Å—å: –≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞ ---
async def book_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    masters = session.query(Master).all()
    session.close()

    kb = [[InlineKeyboardButton(m.name, callback_data=f"SEL_MASTER|{m.id}")]
          for m in masters]
    kb.append([InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="TO_MAIN")])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(kb))

async def sel_master_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    _, master_id = query.data.split("|")
    context.user_data["master_id"] = int(master_id)

    # –°–æ–±–µ—Ä—ë–º –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    session = SessionLocal()
    appts = session.query(Appointment).filter_by(master_id=master_id).all()
    busy = {a.date for a in appts}
    session.close()

    today = date.today()
    cal = build_calendar(today.year, today.month, busy)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=cal)

async def calendar_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–∏—Å—Ç–∞–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤ –∏ –≤—ã–±–æ—Ä –¥–Ω—è."""
    query = update.callback_query
    data = query.data

    if data.startswith("CAL"):
        _, y, m = data.split("|")
        y, m = int(y), int(m)
        session = SessionLocal()
        master_id = context.user_data["master_id"]
        appts = session.query(Appointment).filter_by(master_id=master_id).all()
        busy = {a.date for a in appts}
        session.close()

        cal = build_calendar(y, m, busy)
        await query.edit_message_reply_markup(cal)

    elif data.startswith("DAY"):
        _, iso = data.split("|")
        chosen = date.fromisoformat(iso)
        context.user_data["date"] = chosen
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return

    elif data == "BACK_TO_MASTERS":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=None)
        await book_start(update, context)

async def back_to_masters(update, context):
    query = update.callback_query
    await query.answer()
    await book_start(update, context)



# --- –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["client_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["client_phone"] = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    session = SessionLocal()
    appt = Appointment(
        master_id   = context.user_data["master_id"],
        user_id     = update.effective_user.id,
        client_name = context.user_data["client_name"],
        client_phone= context.user_data["client_phone"],
        date        = context.user_data["date"]
    )
    session.add(appt)
    session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –º–∞—Å—Ç–µ—Ä–∞
    await update.message.reply_text("–í–∞—à–∞ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=MAIN_MENU)
    master = session.query(Master).get(context.user_data["master_id"])
    await context.bot.send_message(
        master.tg_id,
        f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n{appt.client_name}, {appt.client_phone}\n"
        f"–î–∞—Ç–∞: {appt.date}"
    )
    session.close()

# --- /mybooking –∏ /cancelbooking ---
async def my_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    appt = session.query(Appointment)\
        .filter_by(user_id=update.effective_user.id)\
        .order_by(Appointment.created_at.desc())\
        .first()
    session.close()

    if not appt:
        text = "–ó–∞–ø–∏—Å–∏ –Ω–µ—Ç."
    else:
        text = f"{appt.date} ‚Äî {appt.client_name}, {appt.client_phone}"
    await update.message.reply_text(text)

async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    appt = session.query(Appointment)\
        .filter_by(user_id=update.effective_user.id)\
        .order_by(Appointment.created_at.desc())\
        .first()

    if not appt:
        await update.message.reply_text("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
    else:
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É", callback_data="DO_CANCEL")],
             [InlineKeyboardButton("‚Ü© –û—Ç–º–µ–Ω–∞", callback_data="TO_MAIN")]]
        )
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å: {appt.date} ‚Äî {appt.client_name}",
            reply_markup=kb
        )
    session.close()

async def cancel_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    session = SessionLocal()
    appt = session.query(Appointment)\
        .filter_by(user_id=query.from_user.id)\
        .order_by(Appointment.created_at.desc())\
        .first()
    if appt:
        session.delete(appt)
        session.commit()
        await query.edit_message_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    else:
        await query.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–∏.")
    session.close()

# --- –ö–æ–Ω—Ç–∞–∫—Ç—ã ---
async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("üìû +7 123 456-78-90\n"
            "üì± @your_instagram\n"
            "üåê your_site.com")
    await update.message.reply_text(text)

# --- –ê–¥–º–∏–Ω-–º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞ ---
async def admin_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    master = session.query(Master).filter_by(tg_id=update.effective_user.id).first()
    appts = master.appointments if master else []
    session.close()

    if not appts:
        await update.message.reply_text("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
    else:
        lines = [f"{a.date}: {a.client_name}, {a.client_phone}" for a in appts]
        await update.message.reply_text("\n".join(lines))

# -------- –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è --------

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mybooking", my_booking))
    app.add_handler(CommandHandler("cancelbooking", cancel_booking))
    app.add_handler(CommandHandler("contacts", contacts))

    # –†–∞–±–æ—á–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(MessageHandler(filters.Regex("üìù –ó–∞–ø–∏—Å—å"), book_start))
    app.add_handler(CallbackQueryHandler(sel_master_cb, pattern="SEL_MASTER"))
    app.add_handler(CallbackQueryHandler(calendar_cb, pattern="^(CAL|DAY|BACK_TO_MASTERS)"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name), 1)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone), 2)
    app.add_handler(CallbackQueryHandler(cancel_cb, pattern="DO_CANCEL"))
    app.add_handler(MessageHandler(filters.Regex("üìã –ú–æ—è –∑–∞–ø–∏—Å—å"), my_booking))
    app.add_handler(MessageHandler(filters.Regex("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"), cancel_booking))
    app.add_handler(MessageHandler(filters.Regex("‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã"), contacts))

    # –ê–¥–º–∏–Ω-–º–∞—Å—Ç–µ—Ä
    app.add_handler(MessageHandler(filters.Regex("üìÑ –í—Å–µ –∑–∞–ø–∏—Å–∏"), admin_all))
    app.add_handler(CallbackQueryHandler(back_to_masters, pattern="^BACK_TO_MASTERS$"))
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook
    app.bot.set_webhook(url=f"{WEBHOOK_HOST}{WEBHOOK_PATH}")
    app.run_webhook(
        listen="0.0.0.0",
        port=WEBHOOK_PORT,
        webhook_path=WEBHOOK_PATH
    )

if __name__ == "__main__":
    main()
